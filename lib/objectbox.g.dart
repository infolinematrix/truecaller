// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'data/models/account_mode.dart';
import 'data/models/scroll_model.dart';
import 'data/models/settings_model.dart';
import 'data/models/transactions_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 3587945294040094239),
      name: 'AccountsModel',
      lastPropertyId: const IdUid(14, 2240438684854528459),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3751026663864751467),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 729472125419628461),
            name: 'parent',
            type: 6,
            flags: 8,
            indexId: const IdUid(1, 8652495411927107198)),
        ModelProperty(
            id: const IdUid(3, 6634474258144786480),
            name: 'name',
            type: 9,
            flags: 2080,
            indexId: const IdUid(2, 6544985954594090028)),
        ModelProperty(
            id: const IdUid(4, 8736996499202676156),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4925159674100123602),
            name: 'hasChild',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8563201432824939981),
            name: 'isActive',
            type: 1,
            flags: 8,
            indexId: const IdUid(3, 2746443304144647962)),
        ModelProperty(
            id: const IdUid(7, 1714798893465991265),
            name: 'isSystem',
            type: 1,
            flags: 8,
            indexId: const IdUid(4, 1611618025593321597)),
        ModelProperty(
            id: const IdUid(8, 3367288634707214150),
            name: 'budget',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 1376842290259502632),
            name: 'allowReceipt',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 7976699294300509236),
            name: 'allowPayment',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 3617656544665544323),
            name: 'allowTransfer',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 7169108749033722654),
            name: 'openingBalance',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 388382213400431850),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 2240438684854528459),
            name: 'createdOn',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 1909471998653054089),
      name: 'ScrollModel',
      lastPropertyId: const IdUid(2, 8439057008360783066),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6957128523376889245),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8439057008360783066),
            name: 'slno',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 2429490463401786500),
      name: 'SettingsModel',
      lastPropertyId: const IdUid(3, 4796288076083726606),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2796824751288382801),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 537273727052013725),
            name: 'key',
            type: 9,
            flags: 2048,
            indexId: const IdUid(5, 5566726979630867220)),
        ModelProperty(
            id: const IdUid(3, 4796288076083726606),
            name: 'value',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 6670135516669978220),
      name: 'TransactionsModel',
      lastPropertyId: const IdUid(13, 8120996116591326252),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 205443973016576243),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2608262832704091844),
            name: 'account',
            type: 5,
            flags: 8,
            indexId: const IdUid(6, 8165566941112676848)),
        ModelProperty(
            id: const IdUid(3, 8307104008231653495),
            name: 'accountName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1833299203713034297),
            name: 'narration',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7308999433698019718),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5936965314665774222),
            name: 'amountDr',
            type: 7,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 9156167102570850397),
            name: 'amountCr',
            type: 7,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 1370996393102818295),
            name: 'txnMode',
            type: 9,
            flags: 2048,
            indexId: const IdUid(7, 8454848033744381955)),
        ModelProperty(
            id: const IdUid(9, 7356588122190672795),
            name: 'modeAccount',
            type: 5,
            flags: 8,
            indexId: const IdUid(8, 3075213950846503505)),
        ModelProperty(
            id: const IdUid(10, 7842207762504896190),
            name: 'txnType',
            type: 9,
            flags: 2048,
            indexId: const IdUid(9, 5383769689304780895)),
        ModelProperty(
            id: const IdUid(11, 1489578814845409431),
            name: 'scrollNo',
            type: 5,
            flags: 8,
            indexId: const IdUid(10, 309534776079532775)),
        ModelProperty(
            id: const IdUid(12, 3360457327064616118),
            name: 'txnDate',
            type: 10,
            flags: 8,
            indexId: const IdUid(11, 1904891229686050323)),
        ModelProperty(
            id: const IdUid(13, 8120996116591326252),
            name: 'createdOn',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(4, 6670135516669978220),
      lastIndexId: const IdUid(11, 1904891229686050323),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    AccountsModel: EntityDefinition<AccountsModel>(
        model: _entities[0],
        toOneRelations: (AccountsModel object) => [],
        toManyRelations: (AccountsModel object) => {},
        getId: (AccountsModel object) => object.id,
        setId: (AccountsModel object, int id) {
          object.id = id;
        },
        objectToFB: (AccountsModel object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final typeOffset = fbb.writeString(object.type);
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(15);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.parent);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, typeOffset);
          fbb.addBool(4, object.hasChild);
          fbb.addBool(5, object.isActive);
          fbb.addBool(6, object.isSystem);
          fbb.addFloat64(7, object.budget);
          fbb.addBool(8, object.allowReceipt);
          fbb.addBool(9, object.allowPayment);
          fbb.addBool(10, object.allowTransfer);
          fbb.addFloat64(11, object.openingBalance);
          fbb.addOffset(12, descriptionOffset);
          fbb.addInt64(13, object.createdOn?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdOnValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 30);
          final object = AccountsModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              parent:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              type: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              createdOn: createdOnValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(createdOnValue),
              description: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 28, ''),
              isActive: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 14, false),
              isSystem: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 16, false),
              hasChild: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 12, false),
              budget: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 18),
              allowPayment: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 22),
              allowReceipt: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 20),
              allowTransfer: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 24),
              openingBalance: const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 26));

          return object;
        }),
    ScrollModel: EntityDefinition<ScrollModel>(
        model: _entities[1],
        toOneRelations: (ScrollModel object) => [],
        toManyRelations: (ScrollModel object) => {},
        getId: (ScrollModel object) => object.id,
        setId: (ScrollModel object, int id) {
          object.id = id;
        },
        objectToFB: (ScrollModel object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addInt64(1, object.slno);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ScrollModel(
              slno: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 6))
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    SettingsModel: EntityDefinition<SettingsModel>(
        model: _entities[2],
        toOneRelations: (SettingsModel object) => [],
        toManyRelations: (SettingsModel object) => {},
        getId: (SettingsModel object) => object.id,
        setId: (SettingsModel object, int id) {
          object.id = id;
        },
        objectToFB: (SettingsModel object, fb.Builder fbb) {
          final keyOffset = fbb.writeString(object.key);
          final valueOffset = fbb.writeString(object.value);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, keyOffset);
          fbb.addOffset(2, valueOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = SettingsModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              key: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              value: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''));

          return object;
        }),
    TransactionsModel: EntityDefinition<TransactionsModel>(
        model: _entities[3],
        toOneRelations: (TransactionsModel object) => [],
        toManyRelations: (TransactionsModel object) => {},
        getId: (TransactionsModel object) => object.id,
        setId: (TransactionsModel object, int id) {
          object.id = id;
        },
        objectToFB: (TransactionsModel object, fb.Builder fbb) {
          final accountNameOffset = object.accountName == null
              ? null
              : fbb.writeString(object.accountName!);
          final narrationOffset = object.narration == null
              ? null
              : fbb.writeString(object.narration!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final txnModeOffset = fbb.writeString(object.txnMode);
          final txnTypeOffset = fbb.writeString(object.txnType);
          fbb.startTable(14);
          fbb.addInt64(0, object.id);
          fbb.addInt32(1, object.account);
          fbb.addOffset(2, accountNameOffset);
          fbb.addOffset(3, narrationOffset);
          fbb.addOffset(4, descriptionOffset);
          fbb.addFloat32(5, object.amountDr);
          fbb.addFloat32(6, object.amountCr);
          fbb.addOffset(7, txnModeOffset);
          fbb.addInt32(8, object.modeAccount);
          fbb.addOffset(9, txnTypeOffset);
          fbb.addInt32(10, object.scrollNo);
          fbb.addInt64(11, object.txnDate?.millisecondsSinceEpoch);
          fbb.addInt64(12, object.createdOn?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final txnDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 26);
          final createdOnValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 28);
          final object = TransactionsModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              account:
                  const fb.Int32Reader().vTableGet(buffer, rootOffset, 6, 0),
              accountName: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              narration: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              amountDr:
                  const fb.Float32Reader().vTableGet(buffer, rootOffset, 14, 0),
              amountCr:
                  const fb.Float32Reader().vTableGet(buffer, rootOffset, 16, 0),
              txnMode: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''),
              modeAccount:
                  const fb.Int32Reader().vTableGet(buffer, rootOffset, 20, 0),
              txnType: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 22, ''),
              scrollNo:
                  const fb.Int32Reader().vTableGet(buffer, rootOffset, 24, 0),
              txnDate: txnDateValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(txnDateValue),
              createdOn: createdOnValue == null ? null : DateTime.fromMillisecondsSinceEpoch(createdOnValue),
              description: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 12));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [AccountsModel] entity fields to define ObjectBox queries.
class AccountsModel_ {
  /// see [AccountsModel.id]
  static final id =
      QueryIntegerProperty<AccountsModel>(_entities[0].properties[0]);

  /// see [AccountsModel.parent]
  static final parent =
      QueryIntegerProperty<AccountsModel>(_entities[0].properties[1]);

  /// see [AccountsModel.name]
  static final name =
      QueryStringProperty<AccountsModel>(_entities[0].properties[2]);

  /// see [AccountsModel.type]
  static final type =
      QueryStringProperty<AccountsModel>(_entities[0].properties[3]);

  /// see [AccountsModel.hasChild]
  static final hasChild =
      QueryBooleanProperty<AccountsModel>(_entities[0].properties[4]);

  /// see [AccountsModel.isActive]
  static final isActive =
      QueryBooleanProperty<AccountsModel>(_entities[0].properties[5]);

  /// see [AccountsModel.isSystem]
  static final isSystem =
      QueryBooleanProperty<AccountsModel>(_entities[0].properties[6]);

  /// see [AccountsModel.budget]
  static final budget =
      QueryDoubleProperty<AccountsModel>(_entities[0].properties[7]);

  /// see [AccountsModel.allowReceipt]
  static final allowReceipt =
      QueryBooleanProperty<AccountsModel>(_entities[0].properties[8]);

  /// see [AccountsModel.allowPayment]
  static final allowPayment =
      QueryBooleanProperty<AccountsModel>(_entities[0].properties[9]);

  /// see [AccountsModel.allowTransfer]
  static final allowTransfer =
      QueryBooleanProperty<AccountsModel>(_entities[0].properties[10]);

  /// see [AccountsModel.openingBalance]
  static final openingBalance =
      QueryDoubleProperty<AccountsModel>(_entities[0].properties[11]);

  /// see [AccountsModel.description]
  static final description =
      QueryStringProperty<AccountsModel>(_entities[0].properties[12]);

  /// see [AccountsModel.createdOn]
  static final createdOn =
      QueryIntegerProperty<AccountsModel>(_entities[0].properties[13]);
}

/// [ScrollModel] entity fields to define ObjectBox queries.
class ScrollModel_ {
  /// see [ScrollModel.id]
  static final id =
      QueryIntegerProperty<ScrollModel>(_entities[1].properties[0]);

  /// see [ScrollModel.slno]
  static final slno =
      QueryIntegerProperty<ScrollModel>(_entities[1].properties[1]);
}

/// [SettingsModel] entity fields to define ObjectBox queries.
class SettingsModel_ {
  /// see [SettingsModel.id]
  static final id =
      QueryIntegerProperty<SettingsModel>(_entities[2].properties[0]);

  /// see [SettingsModel.key]
  static final key =
      QueryStringProperty<SettingsModel>(_entities[2].properties[1]);

  /// see [SettingsModel.value]
  static final value =
      QueryStringProperty<SettingsModel>(_entities[2].properties[2]);
}

/// [TransactionsModel] entity fields to define ObjectBox queries.
class TransactionsModel_ {
  /// see [TransactionsModel.id]
  static final id =
      QueryIntegerProperty<TransactionsModel>(_entities[3].properties[0]);

  /// see [TransactionsModel.account]
  static final account =
      QueryIntegerProperty<TransactionsModel>(_entities[3].properties[1]);

  /// see [TransactionsModel.accountName]
  static final accountName =
      QueryStringProperty<TransactionsModel>(_entities[3].properties[2]);

  /// see [TransactionsModel.narration]
  static final narration =
      QueryStringProperty<TransactionsModel>(_entities[3].properties[3]);

  /// see [TransactionsModel.description]
  static final description =
      QueryStringProperty<TransactionsModel>(_entities[3].properties[4]);

  /// see [TransactionsModel.amountDr]
  static final amountDr =
      QueryDoubleProperty<TransactionsModel>(_entities[3].properties[5]);

  /// see [TransactionsModel.amountCr]
  static final amountCr =
      QueryDoubleProperty<TransactionsModel>(_entities[3].properties[6]);

  /// see [TransactionsModel.txnMode]
  static final txnMode =
      QueryStringProperty<TransactionsModel>(_entities[3].properties[7]);

  /// see [TransactionsModel.modeAccount]
  static final modeAccount =
      QueryIntegerProperty<TransactionsModel>(_entities[3].properties[8]);

  /// see [TransactionsModel.txnType]
  static final txnType =
      QueryStringProperty<TransactionsModel>(_entities[3].properties[9]);

  /// see [TransactionsModel.scrollNo]
  static final scrollNo =
      QueryIntegerProperty<TransactionsModel>(_entities[3].properties[10]);

  /// see [TransactionsModel.txnDate]
  static final txnDate =
      QueryIntegerProperty<TransactionsModel>(_entities[3].properties[11]);

  /// see [TransactionsModel.createdOn]
  static final createdOn =
      QueryIntegerProperty<TransactionsModel>(_entities[3].properties[12]);
}
